package jhol_test

import (
	"context"
	"testing"
	"time"

	"github.com/kanmu/jhol"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestClientIsHoliday(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2024-01-01 00:00:00"},
		{"2024-01-08 00:00:00"},
		{"2024-02-11 00:00:00"},
		{"2024-02-23 00:00:00"},
		{"2024-03-20 00:00:00"},
		{"2024-04-29 00:00:00"},
		{"2024-05-03 00:00:00"},
		{"2024-05-04 00:00:00"},
		{"2024-05-05 00:00:00"},
		{"2024-07-15 00:00:00"},
		{"2024-08-11 00:00:00"},
		{"2024-09-16 00:00:00"},
		{"2024-09-23 00:00:00"},
		{"2024-10-14 00:00:00"},
		{"2024-11-03 00:00:00"},
		{"2024-11-23 00:00:00"},

		{"2024-01-01 23:59:59"},
		{"2024-01-08 23:59:59"},
		{"2024-02-11 23:59:59"},
		{"2024-02-23 23:59:59"},
		{"2024-03-20 23:59:59"},
		{"2024-04-29 23:59:59"},
		{"2024-05-03 23:59:59"},
		{"2024-05-04 23:59:59"},
		{"2024-05-05 23:59:59"},
		{"2024-07-15 23:59:59"},
		{"2024-08-11 23:59:59"},
		{"2024-09-16 23:59:59"},
		{"2024-09-23 23:59:59"},
		{"2024-10-14 23:59:59"},
		{"2024-11-03 23:59:59"},
		{"2024-11-23 23:59:59"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		ok, err := client.IsHoliday(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Truef(ok, t.date)
	}
}

func TestClientIsNotHoliday(t *testing.T) {
	assert := assert.New(t)
	require := require.New(t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2022-01-02 00:00:00"}, // +1
		{"2022-01-07 00:00:00"}, // -1
		{"2022-02-13 00:00:00"}, // +2
		{"2022-02-22 00:00:00"}, // -1
		{"2022-03-22 00:00:00"}, // +1
		{"2022-04-28 00:00:00"}, // -1
		{"2022-05-13 00:00:00"}, // +10
		{"2022-05-14 00:00:00"}, // +10
		{"2022-05-15 00:00:00"}, // +10
		{"2022-07-14 00:00:00"}, // -1
		{"2022-08-13 00:00:00"}, // +2
		{"2022-09-15 00:00:00"}, // -1
		{"2022-09-24 00:00:00"}, // +2
		{"2022-10-13 00:00:00"}, // -1
		{"2022-11-05 00:00:00"}, // +2
		{"2022-11-22 00:00:00"}, // -1
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		ok, err := client.IsHoliday(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Falsef(ok, "%+v", t)
	}
}

func TestClientIsHoliday_UTC(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2023-12-31 15:00:00"},
		{"2024-01-07 15:00:00"},
		{"2024-02-10 15:00:00"},
		{"2024-02-22 15:00:00"},
		{"2024-03-19 15:00:00"},
		{"2024-04-28 15:00:00"},
		{"2024-05-02 15:00:00"},
		{"2024-05-03 15:00:00"},
		{"2024-05-04 15:00:00"},
		{"2024-07-14 15:00:00"},
		{"2024-08-10 15:00:00"},
		{"2024-09-15 15:00:00"},
		{"2024-09-22 15:00:00"},
		{"2024-10-13 15:00:00"},
		{"2024-11-02 15:00:00"},
		{"2024-11-22 15:00:00"},

		{"2024-01-01 14:59:59"},
		{"2024-01-08 14:59:59"},
		{"2024-02-11 14:59:59"},
		{"2024-02-23 14:59:59"},
		{"2024-03-20 14:59:59"},
		{"2024-04-29 14:59:59"},
		{"2024-05-03 14:59:59"},
		{"2024-05-04 14:59:59"},
		{"2024-05-05 14:59:59"},
		{"2024-07-15 14:59:59"},
		{"2024-08-11 14:59:59"},
		{"2024-09-16 14:59:59"},
		{"2024-09-23 14:59:59"},
		{"2024-10-14 14:59:59"},
		{"2024-11-03 14:59:59"},
		{"2024-11-23 14:59:59"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		ok, err := client.IsHoliday(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Truef(ok, t.date)
	}
}

func TestClientIsNotHoliday_UTC(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2023-12-31 14:59:59"},
		{"2024-01-07 14:59:59"},
		{"2024-02-10 14:59:59"},
		{"2024-02-22 14:59:59"},
		{"2024-03-19 14:59:59"},
		{"2024-04-28 14:59:59"},
		{"2024-05-02 14:59:59"},
		// {"2024-05-03 14:59:59"},
		// {"2024-05-04 14:59:59"},
		{"2024-07-14 14:59:59"},
		{"2024-08-10 14:59:59"},
		{"2024-09-15 14:59:59"},
		// {"2024-09-22 14:59:59"},
		{"2024-10-13 14:59:59"},
		{"2024-11-02 14:59:59"},
		{"2024-11-22 14:59:59"},

		{"2024-01-01 15:00:01"},
		{"2024-01-08 15:00:01"},
		// {"2024-02-11 15:00:01"},
		{"2024-02-23 15:00:01"},
		{"2024-03-20 15:00:01"},
		{"2024-04-29 15:00:01"},
		// {"2024-05-03 15:00:01"},
		// {"2024-05-04 15:00:01"},
		// {"2024-05-05 15:00:01"},
		{"2024-07-15 15:00:01"},
		// {"2024-08-11 15:00:01"},
		{"2024-09-16 15:00:01"},
		{"2024-09-23 15:00:01"},
		{"2024-10-14 15:00:01"},
		// {"2024-11-03 15:00:01"},
		{"2024-11-23 15:00:01"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		ok, err := client.IsHoliday(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Falsef(ok, t.date)
	}
}
