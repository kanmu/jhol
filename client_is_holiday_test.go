package jhol_test

import (
	"context"
	"testing"
	"time"

	"github.com/kanmu/jhol"
	"github.com/stretchr/testify/assert"
)

func TestClientIsHoliday(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2022-01-01 00:00:00"},
		{"2022-01-10 00:00:00"},
		{"2022-02-11 00:00:00"},
		{"2022-02-23 00:00:00"},
		{"2022-03-21 00:00:00"},
		{"2022-04-29 00:00:00"},
		{"2022-05-03 00:00:00"},
		{"2022-05-04 00:00:00"},
		{"2022-05-05 00:00:00"},
		{"2022-07-18 00:00:00"},
		{"2022-08-11 00:00:00"},
		{"2022-09-19 00:00:00"},
		{"2022-09-23 00:00:00"},
		{"2022-10-10 00:00:00"},
		{"2022-11-03 00:00:00"},
		{"2022-11-23 00:00:00"},

		{"2022-01-01 23:59:59"},
		{"2022-01-10 23:59:59"},
		{"2022-02-11 23:59:59"},
		{"2022-02-23 23:59:59"},
		{"2022-03-21 23:59:59"},
		{"2022-04-29 23:59:59"},
		{"2022-05-03 23:59:59"},
		{"2022-05-04 23:59:59"},
		{"2022-05-05 23:59:59"},
		{"2022-07-18 23:59:59"},
		{"2022-08-11 23:59:59"},
		{"2022-09-19 23:59:59"},
		{"2022-09-23 23:59:59"},
		{"2022-10-10 23:59:59"},
		{"2022-11-03 23:59:59"},
		{"2022-11-23 23:59:59"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		ok, err := client.IsHoliday(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Truef(ok, "%+v", t)
	}
}

func TestClientIsNotHoliday(t *testing.T) {
	assert := assert.New(t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2022-01-02 00:00:00"}, // +1
		{"2022-01-09 00:00:00"}, // -1
		{"2022-02-12 00:00:00"}, // +1
		{"2022-02-22 00:00:00"}, // -1
		{"2022-03-22 00:00:00"}, // +1
		{"2022-04-28 00:00:00"}, // -1
		{"2022-05-13 00:00:00"}, // +10
		{"2022-05-14 00:00:00"}, // +10
		{"2022-05-15 00:00:00"}, // +10
		{"2022-07-17 00:00:00"}, // -1
		{"2022-08-12 00:00:00"}, // +1
		{"2022-09-18 00:00:00"}, // -1
		{"2022-09-24 00:00:00"}, // +1
		{"2022-10-09 00:00:00"}, // -1
		{"2022-11-04 00:00:00"}, // +1
		{"2022-11-22 00:00:00"}, // -1
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		ok, err := client.IsHoliday(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Falsef(ok, "%+v", t)
	}
}

func TestClientIsHoliday_UTC(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2021-12-31 15:00:00"},
		{"2022-01-09 15:00:00"},
		{"2022-02-10 15:00:00"},
		{"2022-02-22 15:00:00"},
		{"2022-03-20 15:00:00"},
		{"2022-04-28 15:00:00"},
		{"2022-05-02 15:00:00"},
		{"2022-05-03 15:00:00"},
		{"2022-05-04 15:00:00"},
		{"2022-07-17 15:00:00"},
		{"2022-08-10 15:00:00"},
		{"2022-09-18 15:00:00"},
		{"2022-09-22 15:00:00"},
		{"2022-10-09 15:00:00"},
		{"2022-11-02 15:00:00"},
		{"2022-11-22 15:00:00"},

		{"2022-01-01 14:59:59"},
		{"2022-01-10 14:59:59"},
		{"2022-02-11 14:59:59"},
		{"2022-02-23 14:59:59"},
		{"2022-03-21 14:59:59"},
		{"2022-04-29 14:59:59"},
		{"2022-05-03 14:59:59"},
		{"2022-05-04 14:59:59"},
		{"2022-05-05 14:59:59"},
		{"2022-07-18 14:59:59"},
		{"2022-08-11 14:59:59"},
		{"2022-09-19 14:59:59"},
		{"2022-09-23 14:59:59"},
		{"2022-10-10 14:59:59"},
		{"2022-11-03 14:59:59"},
		{"2022-11-23 14:59:59"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		ok, err := client.IsHoliday(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Truef(ok, "%+v", t)
	}
}

func TestClientIsNotHoliday_UTC(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2021-12-31 14:59:59"},
		{"2022-01-09 14:59:59"},
		{"2022-02-10 14:59:59"},
		{"2022-02-22 14:59:59"},
		{"2022-03-20 14:59:59"},
		{"2022-04-28 14:59:59"},
		{"2022-05-02 14:59:59"},
		// {"2022-05-03 14:59:59"},
		// {"2022-05-04 14:59:59"},
		{"2022-07-17 14:59:59"},
		{"2022-08-10 14:59:59"},
		{"2022-09-18 14:59:59"},
		{"2022-09-22 14:59:59"},
		{"2022-10-09 14:59:59"},
		{"2022-11-02 14:59:59"},
		{"2022-11-22 14:59:59"},

		{"2022-01-01 15:00:01"},
		{"2022-01-10 15:00:01"},
		{"2022-02-11 15:00:01"},
		{"2022-02-23 15:00:01"},
		{"2022-03-21 15:00:01"},
		{"2022-04-29 15:00:01"},
		// {"2022-05-03 15:00:01"},
		// {"2022-05-04 15:00:01"},
		{"2022-05-05 15:00:01"},
		{"2022-07-18 15:00:01"},
		{"2022-08-11 15:00:01"},
		{"2022-09-19 15:00:01"},
		{"2022-09-23 15:00:01"},
		{"2022-10-10 15:00:01"},
		{"2022-11-03 15:00:01"},
		{"2022-11-23 15:00:01"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		ok, err := client.IsHoliday(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Falsef(ok, "%+v", t)
	}
}
