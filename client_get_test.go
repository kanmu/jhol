package jhol_test

import (
	"context"
	"testing"
	"time"

	"github.com/kanmu/jhol"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestClientGet(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date         string
		expectedDate string
		expectedName string
	}{
		{"2024-01-01 00:00:00", "2024-01-01", "元日"},
		{"2024-02-11 00:00:00", "2024-02-11", "建国記念の日"},
		{"2024-02-12 00:00:00", "2024-02-12", "休日"},
		{"2024-02-23 00:00:00", "2024-02-23", "天皇誕生日"},
		{"2024-03-20 00:00:00", "2024-03-20", "春分の日"},
		{"2024-04-29 00:00:00", "2024-04-29", "昭和の日"},
		{"2024-05-03 00:00:00", "2024-05-03", "憲法記念日"},
		{"2024-05-04 00:00:00", "2024-05-04", "みどりの日"},
		{"2024-05-05 00:00:00", "2024-05-05", "こどもの日"},
		{"2024-05-06 00:00:00", "2024-05-06", "休日"},
		{"2024-07-15 00:00:00", "2024-07-15", "海の日"},
		{"2024-08-11 00:00:00", "2024-08-11", "山の日"},
		{"2024-08-12 00:00:00", "2024-08-12", "休日"},
		{"2024-09-16 00:00:00", "2024-09-16", "敬老の日"},
		{"2024-09-22 00:00:00", "2024-09-22", "秋分の日"},
		{"2024-09-23 00:00:00", "2024-09-23", "秋分の日 振替休日"},
		{"2024-10-14 00:00:00", "2024-10-14", "スポーツの日"},
		{"2024-11-03 00:00:00", "2024-11-03", "文化の日"},
		{"2024-11-04 00:00:00", "2024-11-04", "文化の日 振替休日"},
		{"2024-11-23 00:00:00", "2024-11-23", "勤労感謝の日"},

		{"2024-01-01 23:59:59", "2024-01-01", "元日"},
		{"2024-02-11 23:59:59", "2024-02-11", "建国記念の日"},
		{"2024-02-12 23:59:59", "2024-02-12", "休日"},
		{"2024-02-23 23:59:59", "2024-02-23", "天皇誕生日"},
		{"2024-03-20 23:59:59", "2024-03-20", "春分の日"},
		{"2024-04-29 23:59:59", "2024-04-29", "昭和の日"},
		{"2024-05-03 23:59:59", "2024-05-03", "憲法記念日"},
		{"2024-05-04 23:59:59", "2024-05-04", "みどりの日"},
		{"2024-05-05 23:59:59", "2024-05-05", "こどもの日"},
		{"2024-05-06 23:59:59", "2024-05-06", "休日"},
		{"2024-07-15 23:59:59", "2024-07-15", "海の日"},
		{"2024-08-11 23:59:59", "2024-08-11", "山の日"},
		{"2024-08-12 23:59:59", "2024-08-12", "休日"},
		{"2024-09-16 23:59:59", "2024-09-16", "敬老の日"},
		{"2024-09-22 23:59:59", "2024-09-22", "秋分の日"},
		{"2024-09-23 23:59:59", "2024-09-23", "秋分の日 振替休日"},
		{"2024-10-14 23:59:59", "2024-10-14", "スポーツの日"},
		{"2024-11-03 23:59:59", "2024-11-03", "文化の日"},
		{"2024-11-04 23:59:59", "2024-11-04", "文化の日 振替休日"},
		{"2024-11-23 23:59:59", "2024-11-23", "勤労感謝の日"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		h, err := client.Get(context.Background(), d)
		require.NoErrorf(err, t.date)
		expectedDate, _ := time.ParseInLocation("2006-01-02", t.expectedDate, JST)
		expected := &jhol.Holiday{Date: expectedDate, Name: t.expectedName}
		assert.Equalf(expected, h, "%v\n!= %v\n", expected, h)
	}
}

func TestClientGet_Nil(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2024-01-02"}, // +1
		{"2024-02-10"}, // -1
		{"2024-02-13"}, // +1
		{"2024-02-22"}, // -1
		{"2024-03-21"}, // +1
		{"2024-04-28"}, // -1
		{"2024-05-13"}, // +10
		{"2024-05-14"}, // +10
		{"2024-05-15"}, // +10
		{"2024-05-16"}, // +10
		{"2024-07-16"}, // +1
		{"2024-08-10"}, // -1
		{"2024-08-13"}, // +1
		{"2024-09-15"}, // -1
		{"2024-09-21"}, // -1
		{"2024-09-24"}, // +1
		{"2024-10-13"}, // -1
		{"2024-11-02"}, // -1
		{"2024-11-05"}, // +1
		{"2024-11-22"}, //-1
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02", t.date, JST)
		h, err := client.Get(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Nilf(h, t.date)
	}
}

func TestClientGet_UTC(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date         string
		expectedDate string
		expectedName string
	}{
		{"2024-01-01 00:00:00", "2024-01-01", "元日"},
		{"2024-02-11 00:00:00", "2024-02-11", "建国記念の日"},
		{"2024-02-12 00:00:00", "2024-02-12", "休日"},
		{"2024-02-23 00:00:00", "2024-02-23", "天皇誕生日"},
		{"2024-03-20 00:00:00", "2024-03-20", "春分の日"},
		{"2024-04-29 00:00:00", "2024-04-29", "昭和の日"},
		{"2024-05-03 00:00:00", "2024-05-03", "憲法記念日"},
		{"2024-05-04 00:00:00", "2024-05-04", "みどりの日"},
		{"2024-05-05 00:00:00", "2024-05-05", "こどもの日"},
		{"2024-05-06 00:00:00", "2024-05-06", "休日"},
		{"2024-07-15 00:00:00", "2024-07-15", "海の日"},
		{"2024-08-11 00:00:00", "2024-08-11", "山の日"},
		{"2024-08-12 00:00:00", "2024-08-12", "休日"},
		{"2024-09-16 00:00:00", "2024-09-16", "敬老の日"},
		{"2024-09-22 00:00:00", "2024-09-22", "秋分の日"},
		{"2024-09-23 00:00:00", "2024-09-23", "秋分の日 振替休日"},
		{"2024-10-14 00:00:00", "2024-10-14", "スポーツの日"},
		{"2024-11-03 00:00:00", "2024-11-03", "文化の日"},
		{"2024-11-04 00:00:00", "2024-11-04", "文化の日 振替休日"},
		{"2024-11-23 00:00:00", "2024-11-23", "勤労感謝の日"},

		{"2024-01-01 14:59:59", "2024-01-01", "元日"},
		{"2024-02-11 14:59:59", "2024-02-11", "建国記念の日"},
		{"2024-02-12 14:59:59", "2024-02-12", "休日"},
		{"2024-02-23 14:59:59", "2024-02-23", "天皇誕生日"},
		{"2024-03-20 14:59:59", "2024-03-20", "春分の日"},
		{"2024-04-29 14:59:59", "2024-04-29", "昭和の日"},
		{"2024-05-03 14:59:59", "2024-05-03", "憲法記念日"},
		{"2024-05-04 14:59:59", "2024-05-04", "みどりの日"},
		{"2024-05-05 14:59:59", "2024-05-05", "こどもの日"},
		{"2024-05-06 14:59:59", "2024-05-06", "休日"},
		{"2024-07-15 14:59:59", "2024-07-15", "海の日"},
		{"2024-08-11 14:59:59", "2024-08-11", "山の日"},
		{"2024-08-12 14:59:59", "2024-08-12", "休日"},
		{"2024-09-16 14:59:59", "2024-09-16", "敬老の日"},
		{"2024-09-22 14:59:59", "2024-09-22", "秋分の日"},
		{"2024-09-23 14:59:59", "2024-09-23", "秋分の日 振替休日"},
		{"2024-10-14 14:59:59", "2024-10-14", "スポーツの日"},
		{"2024-11-03 14:59:59", "2024-11-03", "文化の日"},
		{"2024-11-04 14:59:59", "2024-11-04", "文化の日 振替休日"},
		{"2024-11-23 14:59:59", "2024-11-23", "勤労感謝の日"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		h, err := client.Get(context.Background(), d)
		require.NoErrorf(err, t.date)
		expectedDate, _ := time.ParseInLocation("2006-01-02", t.expectedDate, JST)
		expected := &jhol.Holiday{Date: expectedDate, Name: t.expectedName}
		assert.Equalf(expected, h, "%v\n!= %v\n", expected, h)
	}
}

func TestClientGet_UTC_Nil(_t *testing.T) {
	assert := assert.New(_t)
	require := require.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2024-01-01 15:00:00"},
		// {"2024-02-11 15:00:00"},
		{"2024-02-12 15:00:00"},
		{"2024-02-23 15:00:00"},
		{"2024-03-20 15:00:00"},
		{"2024-04-29 15:00:00"},
		// {"2024-05-03 15:00:00"},
		// {"2024-05-04 15:00:00"},
		// {"2024-05-05 15:00:00"},
		{"2024-05-06 15:00:00"},
		{"2024-07-15 15:00:00"},
		// {"2024-08-11 15:00:00"},
		{"2024-08-12 15:00:00"},
		{"2024-09-16 15:00:00"},
		// {"2024-09-22 15:00:00"},
		{"2024-09-23 15:00:00"},
		{"2024-10-14 15:00:00"},
		// {"2024-11-03 15:00:00"},
		{"2024-11-04 15:00:00"},
		{"2024-11-23 15:00:00"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		h, err := client.Get(context.Background(), d)
		require.NoErrorf(err, t.date)
		assert.Nilf(h, t.date)
	}
}
