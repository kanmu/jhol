package jhol_test

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/winebarrel/jhol"
)

func TestClientGet(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date         string
		expectedDate string
		expectedName string
	}{
		{"2022-01-01 00:00:00", "2022-01-01", "元日"},
		{"2022-01-10 00:00:00", "2022-01-10", "成人の日"},
		{"2022-02-11 00:00:00", "2022-02-11", "建国記念の日"},
		{"2022-02-23 00:00:00", "2022-02-23", "天皇誕生日"},
		{"2022-03-21 00:00:00", "2022-03-21", "春分の日"},
		{"2022-04-29 00:00:00", "2022-04-29", "昭和の日"},
		{"2022-05-03 00:00:00", "2022-05-03", "憲法記念日"},
		{"2022-05-04 00:00:00", "2022-05-04", "みどりの日"},
		{"2022-05-05 00:00:00", "2022-05-05", "こどもの日"},
		{"2022-07-18 00:00:00", "2022-07-18", "海の日"},
		{"2022-08-11 00:00:00", "2022-08-11", "山の日"},
		{"2022-09-19 00:00:00", "2022-09-19", "敬老の日"},
		{"2022-09-23 00:00:00", "2022-09-23", "秋分の日"},
		{"2022-10-10 00:00:00", "2022-10-10", "スポーツの日"},
		{"2022-11-03 00:00:00", "2022-11-03", "文化の日"},
		{"2022-11-23 00:00:00", "2022-11-23", "勤労感謝の日"},

		{"2022-01-01 23:59:59", "2022-01-01", "元日"},
		{"2022-01-10 23:59:59", "2022-01-10", "成人の日"},
		{"2022-02-11 23:59:59", "2022-02-11", "建国記念の日"},
		{"2022-02-23 23:59:59", "2022-02-23", "天皇誕生日"},
		{"2022-03-21 23:59:59", "2022-03-21", "春分の日"},
		{"2022-04-29 23:59:59", "2022-04-29", "昭和の日"},
		{"2022-05-03 23:59:59", "2022-05-03", "憲法記念日"},
		{"2022-05-04 23:59:59", "2022-05-04", "みどりの日"},
		{"2022-05-05 23:59:59", "2022-05-05", "こどもの日"},
		{"2022-07-18 23:59:59", "2022-07-18", "海の日"},
		{"2022-08-11 23:59:59", "2022-08-11", "山の日"},
		{"2022-09-19 23:59:59", "2022-09-19", "敬老の日"},
		{"2022-09-23 23:59:59", "2022-09-23", "秋分の日"},
		{"2022-10-10 23:59:59", "2022-10-10", "スポーツの日"},
		{"2022-11-03 23:59:59", "2022-11-03", "文化の日"},
		{"2022-11-23 23:59:59", "2022-11-23", "勤労感謝の日"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, JST)
		h, err := client.Get(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		expectedDate, _ := time.ParseInLocation("2006-01-02", t.expectedDate, JST)
		expected := &jhol.Holiday{Date: expectedDate, Name: t.expectedName}
		assert.Equal(expected, h)
	}
}

func TestClientGet_Nil(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2022-01-02"}, // +1
		{"2022-01-09"}, // -1
		{"2022-02-12"}, // +1
		{"2022-02-22"}, // -1
		{"2022-03-22"}, // +1
		{"2022-04-28"}, // -1
		{"2022-05-13"}, // +10
		{"2022-05-14"}, // +10
		{"2022-05-15"}, // +10
		{"2022-07-17"}, // -1
		{"2022-08-12"}, // +1
		{"2022-09-18"}, // -1
		{"2022-09-24"}, // +1
		{"2022-10-09"}, // -1
		{"2022-11-04"}, // +1
		{"2022-11-22"}, // -1
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02", t.date, JST)
		h, err := client.Get(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Nilf(h, "%+v", t)
	}
}

func TestClientGet_UTC(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date         string
		expectedDate string
		expectedName string
	}{
		{"2022-01-01 00:00:00", "2022-01-01", "元日"},
		{"2022-01-10 00:00:00", "2022-01-10", "成人の日"},
		{"2022-02-11 00:00:00", "2022-02-11", "建国記念の日"},
		{"2022-02-23 00:00:00", "2022-02-23", "天皇誕生日"},
		{"2022-03-21 00:00:00", "2022-03-21", "春分の日"},
		{"2022-04-29 00:00:00", "2022-04-29", "昭和の日"},
		{"2022-05-03 00:00:00", "2022-05-03", "憲法記念日"},
		{"2022-05-04 00:00:00", "2022-05-04", "みどりの日"},
		{"2022-05-05 00:00:00", "2022-05-05", "こどもの日"},
		{"2022-07-18 00:00:00", "2022-07-18", "海の日"},
		{"2022-08-11 00:00:00", "2022-08-11", "山の日"},
		{"2022-09-19 00:00:00", "2022-09-19", "敬老の日"},
		{"2022-09-23 00:00:00", "2022-09-23", "秋分の日"},
		{"2022-10-10 00:00:00", "2022-10-10", "スポーツの日"},
		{"2022-11-03 00:00:00", "2022-11-03", "文化の日"},
		{"2022-11-23 00:00:00", "2022-11-23", "勤労感謝の日"},

		{"2022-01-01 14:59:59", "2022-01-01", "元日"},
		{"2022-01-10 14:59:59", "2022-01-10", "成人の日"},
		{"2022-02-11 14:59:59", "2022-02-11", "建国記念の日"},
		{"2022-02-23 14:59:59", "2022-02-23", "天皇誕生日"},
		{"2022-03-21 14:59:59", "2022-03-21", "春分の日"},
		{"2022-04-29 14:59:59", "2022-04-29", "昭和の日"},
		{"2022-05-03 14:59:59", "2022-05-03", "憲法記念日"},
		{"2022-05-04 14:59:59", "2022-05-04", "みどりの日"},
		{"2022-05-05 14:59:59", "2022-05-05", "こどもの日"},
		{"2022-07-18 14:59:59", "2022-07-18", "海の日"},
		{"2022-08-11 14:59:59", "2022-08-11", "山の日"},
		{"2022-09-19 14:59:59", "2022-09-19", "敬老の日"},
		{"2022-09-23 14:59:59", "2022-09-23", "秋分の日"},
		{"2022-10-10 14:59:59", "2022-10-10", "スポーツの日"},
		{"2022-11-03 14:59:59", "2022-11-03", "文化の日"},
		{"2022-11-23 14:59:59", "2022-11-23", "勤労感謝の日"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		h, err := client.Get(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		expectedDate, _ := time.ParseInLocation("2006-01-02", t.expectedDate, JST)
		expected := &jhol.Holiday{Date: expectedDate, Name: t.expectedName}
		assert.Equal(expected, h)
	}
}

func TestClientGet_UTC_Nil(_t *testing.T) {
	assert := assert.New(_t)
	client := jhol.NewClient(TestGCalAPIKey)

	tests := []struct {
		date string
	}{
		{"2022-01-01 15:00:00"},
		{"2022-01-10 15:00:00"},
		{"2022-02-11 15:00:00"},
		{"2022-02-23 15:00:00"},
		{"2022-03-21 15:00:00"},
		{"2022-04-29 15:00:00"},
		// "2022-05-03 15:00:00",
		// "2022-05-04 15:00:00",
		{"2022-05-05 15:00:00"},
		{"2022-07-18 15:00:00"},
		{"2022-08-11 15:00:00"},
		{"2022-09-19 15:00:00"},
		{"2022-09-23 15:00:00"},
		{"2022-10-10 15:00:00"},
		{"2022-11-03 15:00:00"},
		{"2022-11-23 15:00:00"},
	}

	for _, t := range tests {
		d, _ := time.ParseInLocation("2006-01-02 15:04:05", t.date, time.UTC)
		h, err := client.Get(context.Background(), d)

		if !assert.NoErrorf(err, "%+v", t) {
			continue
		}

		assert.Nilf(h, "%+v", t)
	}
}
